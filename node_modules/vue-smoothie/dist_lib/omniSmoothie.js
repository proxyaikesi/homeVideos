import { defineComponent, shallowRef, onMounted, onUpdated, onUnmounted, openBlock, createElementBlock, normalizeStyle, unref, createElementVNode, renderSlot } from "vue";
const _sfc_main = /* @__PURE__ */ defineComponent({
  __name: "Smoothie",
  props: {
    weight: { default: 0.06 }
  },
  setup(__props, { expose }) {
    const props = __props;
    let wrap = shallowRef();
    let content = shallowRef();
    let spacer = shallowRef();
    let wrapStyle = { overflow: "auto" };
    let contentWrapStyle = { position: "sticky", top: 0, left: 0 };
    let contentStyle = {
      willChange: "transform",
      position: "absolute",
      width: "100%"
    };
    let exposed = {
      el: wrap,
      x: 0,
      y: 0
    };
    expose(exposed);
    let af;
    let tx = 0, ty = 0, x = 0, y = 0;
    const onScroll = () => {
      {
        ({
          scrollLeft: tx,
          scrollTop: ty
        } = wrap.value);
      }
    };
    const update = () => {
      {
        let contentWrap = content.value.parentElement;
        contentWrap.style.width = "";
        content.value.style.minWidth = contentWrap.scrollWidth + "px";
        content.value.style.width = "";
        contentWrap.style.width = "0";
        spacer.value.style.width = content.value.scrollWidth + "px";
        spacer.value.style.height = content.value.scrollHeight + "px";
      }
    };
    let resizeObserver = new ResizeObserver(update);
    onMounted(() => {
      resizeObserver.observe(content.value);
      update();
      let aspect = 1e3 / 60;
      let prev = performance.now();
      requestAnimationFrame(function cb() {
        af = requestAnimationFrame(cb);
        let now = performance.now();
        let dt = now - prev;
        prev = now;
        let k = props.weight * dt / aspect;
        y += k * (ty - y);
        exposed.y = y;
        {
          x += k * (tx - x);
          exposed.x = x;
        }
        {
          content.value.style.transform = `translate3D(${-x}px, ${-y}px, 0)`;
        }
      });
    });
    onUpdated(() => {
      resizeObserver.observe(content.value);
    });
    onUnmounted(() => {
      cancelAnimationFrame(af);
      resizeObserver.disconnect();
    });
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("div", {
        ref_key: "wrap",
        ref: wrap,
        onScroll,
        style: normalizeStyle(unref(wrapStyle))
      }, [
        createElementVNode("div", {
          style: normalizeStyle(unref(contentWrapStyle))
        }, [
          createElementVNode("div", {
            ref_key: "content",
            ref: content,
            style: normalizeStyle(unref(contentStyle))
          }, [
            renderSlot(_ctx.$slots, "default")
          ], 4)
        ], 4),
        createElementVNode("div", {
          ref_key: "spacer",
          ref: spacer
        }, null, 512)
      ], 36);
    };
  }
});
export {
  _sfc_main as Smoothie
};
