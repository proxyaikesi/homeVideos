"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const mongoose_1 = __importDefault(require("mongoose"));
const moment_timezone_1 = __importDefault(require("moment-timezone"));
const lodash_1 = require("lodash");
const getDateFields = (schema) => {
    return Object.keys(schema.paths).filter((x) => {
        return schema.paths[x] instanceof mongoose_1.default.Schema.Types.Date;
    });
};
module.exports = function (schema) {
    const paths = getDateFields(schema);
    const offset = (0, moment_timezone_1.default)().utcOffset() * 60 * 1000;
    const fixOffset = (doc) => {
        for (let path of paths) {
            const date = (0, lodash_1.get)(doc, path);
            if (date) {
                const fixedDate = date.valueOf() + offset;
                (0, lodash_1.set)(doc, path, new Date(fixedDate));
            }
        }
    };
    function addOffset(next) {
        // @ts-ignore
        if (!this)
            return next();
        // @ts-ignore
        fixOffset(this);
        next();
    }
    function subtractOffset(docs, next) {
        const documents = [];
        if (!docs)
            return next();
        if (!Array.isArray(docs)) {
            // @ts-ignore
            documents.push((docs.constructor.name === 'model') ? docs : this);
        }
        else {
            documents.push(...docs);
        }
        documents.forEach(result => fixOffset(result));
        next();
    }
    schema.pre('save', addOffset);
    schema.pre('findOneAndUpdate', addOffset);
    schema.post('save', subtractOffset);
    schema.post('find', subtractOffset);
    schema.post('findOne', subtractOffset);
    schema.post('findOneAndUpdate', subtractOffset);
};
//# sourceMappingURL=index.js.map