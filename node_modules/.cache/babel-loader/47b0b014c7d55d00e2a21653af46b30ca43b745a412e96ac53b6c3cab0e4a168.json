{"ast":null,"code":"import Video from './video.vue';\nimport { onBeforeMount, ref, reactive } from \"vue\";\nimport axios from 'axios';\nexport default {\n  components: {\n    Video\n  },\n  setup() {\n    // 引入Vue的响应式数据\n    const fullPageContainer = ref(false); // 定义全屏容器引用\n    const fullPage = ref(null); // 定义全屏引用\n\n    let videolist = reactive({\n      arrList: [],\n      // 存储所有视频信息\n      currentVideoIndex: 0,\n      // 当前视频索引\n      visibleVideos: [] // 存储当前可见的视频\n    });\n\n    // 组件挂载前执行的钩子函数\n    onBeforeMount(() => {\n      fnList(); // 获取视频列表\n      setupScrollListener(); // 设置滚动监听\n    });\n\n    // 获取视频列表函数\n    function fnList() {\n      axios.get('http://localhost:3000/getVideo').then(res => {\n        // 对视频列表进行随机排序\n        videolist.arrList = res.data.item.sort(() => 0.5 - Math.random());\n        updateVisibleVideos(); // 更新可见视频列表\n      });\n    }\n    onMounted(() => {\n      if (fullPageContainer.value) {\n        fullPageContainer.value.addEventListener('wheel', mouseWheelHandle, {\n          passive: true\n        });\n      } else {\n        console.error('fullPageContainer is null');\n      }\n    });\n    // 设置滚动监听函数\n    // function setupScrollListener() {\n    //   fullPageContainer.value.addEventListener('wheel', mouseWheelHandle, { passive: true });\n    // }\n\n    // 更新可见视频列表函数\n    function updateVisibleVideos() {\n      const startIndex = videolist.currentVideoIndex; // 获取当前视频索引\n      const endIndex = Math.min(startIndex + 5, videolist.arrList.length); // 计算结束索引\n      videolist.visibleVideos = videolist.arrList.slice(startIndex, endIndex); // 根据索引截取当前可见的视频列表\n    }\n\n    // 鼠标滚轮事件处理函数\n    const mouseWheelHandle = event => {\n      if (event.deltaY > 0) {\n        // 向下滚动\n        scrollDown();\n      } else {\n        // 向上滚动\n        scrollUp();\n      }\n    };\n\n    // 向下滚动函数\n    function scrollDown() {\n      videolist.currentVideoIndex = (videolist.currentVideoIndex + 1) % videolist.arrList.length; // 更新当前视频索引\n      updateVisibleVideos(); // 更新可见视频列表\n    }\n\n    // 向上滚动函数\n    function scrollUp() {\n      videolist.currentVideoIndex = (videolist.currentVideoIndex - 1 + videolist.arrList.length) % videolist.arrList.length; // 更新当前视频索引\n      updateVisibleVideos(); // 更新可见视频列表\n    }\n    return {\n      fullPage,\n      fullPageContainer,\n      videolist // 返回Vue组件需要的数据\n    };\n  }\n};","map":{"version":3,"names":["Video","onBeforeMount","ref","reactive","axios","components","setup","fullPageContainer","fullPage","videolist","arrList","currentVideoIndex","visibleVideos","fnList","setupScrollListener","get","then","res","data","item","sort","Math","random","updateVisibleVideos","onMounted","value","addEventListener","mouseWheelHandle","passive","console","error","startIndex","endIndex","min","length","slice","event","deltaY","scrollDown","scrollUp"],"sources":["D:\\vue3\\video\\src\\components\\index.vue"],"sourcesContent":["<template>\r\n  <div class=\"box\">\r\n    <div class=\"fullPage\" ref=\"fullPage\">\r\n      <!-- fullPageContainer容器用于包裹视频，监听滚动事件 -->\r\n      <div class=\"fullPageContainer\" ref=\"fullPageContainer\" @wheel.passive=\"mouseWheelHandle\">\r\n        <!-- 使用v-for循环渲染visibleVideos中的视频 -->\r\n        <Video\r\n          v-for=\"(item, index) in visibleVideos\" :key=\"index\"\r\n          :inNum=\"index\" :isplay=\"currentVideoIndex === index\"\r\n          :mp4Url=\"item.file_name\"\r\n        ></Video>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport Video from './video.vue'\r\nimport { onBeforeMount, ref, reactive } from \"vue\";\r\nimport axios from 'axios'\r\n\r\nexport default {\r\n  components: {\r\n    Video,\r\n  },\r\n  setup() {\r\n    // 引入Vue的响应式数据\r\n    const fullPageContainer = ref(false); // 定义全屏容器引用\r\n    const fullPage = ref(null); // 定义全屏引用\r\n\r\n    let videolist = reactive({\r\n      arrList: [], // 存储所有视频信息\r\n      currentVideoIndex: 0, // 当前视频索引\r\n      visibleVideos: [] // 存储当前可见的视频\r\n    });\r\n\r\n    // 组件挂载前执行的钩子函数\r\n    onBeforeMount(() => {\r\n      fnList(); // 获取视频列表\r\n      setupScrollListener(); // 设置滚动监听\r\n    });\r\n\r\n    // 获取视频列表函数\r\n    function fnList() {\r\n      axios.get('http://localhost:3000/getVideo').then((res) => {\r\n        // 对视频列表进行随机排序\r\n        videolist.arrList = res.data.item.sort(() => 0.5 - Math.random());\r\n        updateVisibleVideos(); // 更新可见视频列表\r\n      });\r\n    }\r\n    onMounted(() => {\r\n  if (fullPageContainer.value) {\r\n    fullPageContainer.value.addEventListener('wheel', mouseWheelHandle, { passive: true });\r\n  } else {\r\n    console.error('fullPageContainer is null');\r\n  }\r\n});\r\n    // 设置滚动监听函数\r\n    // function setupScrollListener() {\r\n    //   fullPageContainer.value.addEventListener('wheel', mouseWheelHandle, { passive: true });\r\n    // }\r\n\r\n    // 更新可见视频列表函数\r\n    function updateVisibleVideos() {\r\n      const startIndex = videolist.currentVideoIndex; // 获取当前视频索引\r\n      const endIndex = Math.min(startIndex + 5, videolist.arrList.length); // 计算结束索引\r\n      videolist.visibleVideos = videolist.arrList.slice(startIndex, endIndex); // 根据索引截取当前可见的视频列表\r\n    }\r\n\r\n    // 鼠标滚轮事件处理函数\r\n    const mouseWheelHandle = (event) => {\r\n      if (event.deltaY > 0) {\r\n        // 向下滚动\r\n        scrollDown();\r\n      } else {\r\n        // 向上滚动\r\n        scrollUp();\r\n      }\r\n    }\r\n\r\n    // 向下滚动函数\r\n    function scrollDown() {\r\n      videolist.currentVideoIndex = (videolist.currentVideoIndex + 1) % videolist.arrList.length; // 更新当前视频索引\r\n      updateVisibleVideos(); // 更新可见视频列表\r\n    }\r\n\r\n    // 向上滚动函数\r\n    function scrollUp() {\r\n      videolist.currentVideoIndex = (videolist.currentVideoIndex - 1 + videolist.arrList.length) % videolist.arrList.length; // 更新当前视频索引\r\n      updateVisibleVideos(); // 更新可见视频列表\r\n    }\r\n\r\n    return {\r\n      fullPage, fullPageContainer, videolist // 返回Vue组件需要的数据\r\n    }\r\n  },\r\n};\r\n</script>\r\n\r\n\r\n<style scoped lang=\"scss\">\r\n.h1 {\r\n  color: #fff;\r\n  position: absolute;\r\n  z-index: 9999;\r\n}\r\n\r\n.main_h {\r\n  position: relative;\r\n  font-size: 50px;\r\n  color: #fff;\r\n  z-index: 9999;\r\n}\r\n\r\n.box {\r\n  height: 90vh;\r\n  top: 70px;\r\n  flex-direction: column;\r\n  flex: 1;\r\n  display: flex;\r\n  position: relative;\r\n  overflow: hidden;\r\n  background: url('../../public/wallpaper.png');\r\n}\r\n\r\n// .fullPage {\r\n//   height: 100vh; //一定要设置，保证占满\r\n//   overflow: hidden; //一定要设置，多余的先隐藏ss\r\n//   background: url('../../public/wallpaper.png');\r\n// }\r\n.fullPage {\r\n  position: absolute;\r\n  left: 0;\r\n  top: calc(0% + 0px);\r\n  width: 100%;\r\n  height: calc(100% - 0px);\r\n  overflow: visible;\r\n  padding-left: 0;\r\n  padding-right: 68px;\r\n  min-height: 455px;\r\n}\r\n\r\n.fullPageContainer {\r\n  width: 100%;\r\n  display: flex;\r\n\r\n  flex-direction: column;\r\n  height: 90vh;\r\n\r\n  // background:'./public/wallpaper.png' ;\r\n  background: #4947470a;\r\n  border-radius: 10px;\r\n  // background: url(\"./static/images/logo.png\");\r\n  transition: all linear 0.2s;\r\n  flex-direction: column;\r\n  align-items: center;\r\n}\r\n\r\n.section {\r\n  width: 100%;\r\n  height: 100vh;\r\n  background-position: center center;\r\n  background-repeat: no-repeat;\r\n}\r\n\r\n\r\n.section1 .secction1-content {\r\n  color: #fff;\r\n  text-align: center;\r\n  position: absolute;\r\n  top: 40%;\r\n  right: 0;\r\n  left: 0;\r\n}\r\n\r\n.secction1-content h1 {\r\n  font-size: 40px;\r\n  padding-bottom: 30px;\r\n}\r\n\r\n.secction1-content p {\r\n  font-size: 20px;\r\n}\r\n</style>"],"mappings":"AAiBA,OAAOA,KAAI,MAAO,aAAY;AAC9B,SAASC,aAAa,EAAEC,GAAG,EAAEC,QAAO,QAAS,KAAK;AAClD,OAAOC,KAAI,MAAO,OAAM;AAExB,eAAe;EACbC,UAAU,EAAE;IACVL;EACF,CAAC;EACDM,KAAKA,CAAA,EAAG;IACN;IACA,MAAMC,iBAAgB,GAAIL,GAAG,CAAC,KAAK,CAAC,EAAE;IACtC,MAAMM,QAAO,GAAIN,GAAG,CAAC,IAAI,CAAC,EAAE;;IAE5B,IAAIO,SAAQ,GAAIN,QAAQ,CAAC;MACvBO,OAAO,EAAE,EAAE;MAAE;MACbC,iBAAiB,EAAE,CAAC;MAAE;MACtBC,aAAa,EAAE,EAAC,CAAE;IACpB,CAAC,CAAC;;IAEF;IACAX,aAAa,CAAC,MAAM;MAClBY,MAAM,CAAC,CAAC,EAAE;MACVC,mBAAmB,CAAC,CAAC,EAAE;IACzB,CAAC,CAAC;;IAEF;IACA,SAASD,MAAMA,CAAA,EAAG;MAChBT,KAAK,CAACW,GAAG,CAAC,gCAAgC,CAAC,CAACC,IAAI,CAAEC,GAAG,IAAK;QACxD;QACAR,SAAS,CAACC,OAAM,GAAIO,GAAG,CAACC,IAAI,CAACC,IAAI,CAACC,IAAI,CAAC,MAAM,GAAE,GAAIC,IAAI,CAACC,MAAM,CAAC,CAAC,CAAC;QACjEC,mBAAmB,CAAC,CAAC,EAAE;MACzB,CAAC,CAAC;IACJ;IACAC,SAAS,CAAC,MAAM;MAClB,IAAIjB,iBAAiB,CAACkB,KAAK,EAAE;QAC3BlB,iBAAiB,CAACkB,KAAK,CAACC,gBAAgB,CAAC,OAAO,EAAEC,gBAAgB,EAAE;UAAEC,OAAO,EAAE;QAAK,CAAC,CAAC;MACxF,OAAO;QACLC,OAAO,CAACC,KAAK,CAAC,2BAA2B,CAAC;MAC5C;IACF,CAAC,CAAC;IACE;IACA;IACA;IACA;;IAEA;IACA,SAASP,mBAAmBA,CAAA,EAAG;MAC7B,MAAMQ,UAAS,GAAItB,SAAS,CAACE,iBAAiB,EAAE;MAChD,MAAMqB,QAAO,GAAIX,IAAI,CAACY,GAAG,CAACF,UAAS,GAAI,CAAC,EAAEtB,SAAS,CAACC,OAAO,CAACwB,MAAM,CAAC,EAAE;MACrEzB,SAAS,CAACG,aAAY,GAAIH,SAAS,CAACC,OAAO,CAACyB,KAAK,CAACJ,UAAU,EAAEC,QAAQ,CAAC,EAAE;IAC3E;;IAEA;IACA,MAAML,gBAAe,GAAKS,KAAK,IAAK;MAClC,IAAIA,KAAK,CAACC,MAAK,GAAI,CAAC,EAAE;QACpB;QACAC,UAAU,CAAC,CAAC;MACd,OAAO;QACL;QACAC,QAAQ,CAAC,CAAC;MACZ;IACF;;IAEA;IACA,SAASD,UAAUA,CAAA,EAAG;MACpB7B,SAAS,CAACE,iBAAgB,GAAI,CAACF,SAAS,CAACE,iBAAgB,GAAI,CAAC,IAAIF,SAAS,CAACC,OAAO,CAACwB,MAAM,EAAE;MAC5FX,mBAAmB,CAAC,CAAC,EAAE;IACzB;;IAEA;IACA,SAASgB,QAAQA,CAAA,EAAG;MAClB9B,SAAS,CAACE,iBAAgB,GAAI,CAACF,SAAS,CAACE,iBAAgB,GAAI,IAAIF,SAAS,CAACC,OAAO,CAACwB,MAAM,IAAIzB,SAAS,CAACC,OAAO,CAACwB,MAAM,EAAE;MACvHX,mBAAmB,CAAC,CAAC,EAAE;IACzB;IAEA,OAAO;MACLf,QAAQ;MAAED,iBAAiB;MAAEE,SAAQ,CAAE;IACzC;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}